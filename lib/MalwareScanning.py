import datetime
import os
import PyQt6.QtWidgets as QtWidgets
from PyQt6.QtWidgets import QFileDialog
from click import Path
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from PyQt6.QtGui import QIcon, QPixmap
import requests

class MalwareScanning():


    def __init__(self):
        super(MalwareScanning, self).__init__()
    
    def clear(self):
        print("Clear")
        self.lineEdit_malware.setText('')
        self.lineEdit_malware.setStyleSheet("border: 1px solid black;")
        self.lineEdit_malware.setPlaceholderText('ex. https:// or file')
        self.label_maliciousResult.setText('0')
        self.label_suspiciousResult.setText('0')
        self.label_undetectedResult.setText('0')
        self.label_finalURLResurlt.setText('-')
        self.label_tidResult.setText('-')
        self.label_typeMalwareResult.setText('-')
        self.label_sha256Result.setText('-')
        self.label_sizeResult.setText('-')
        self.label_malicious.setStyleSheet("background-color: white;")
        self.label_suspicious.setStyleSheet("background-color: white;")
        self.label_undetected.setStyleSheet("background-color: white;")
        self.label_imagemalware.setPixmap(QPixmap("./assets/images/Defaultscan.png"))
        self.btn_createReport.setText('Create Report')
        self.btn_sendEmail.setText('Send Email')



    def scanMalware(self):
        print("Scan Malware")
        if self.lineEdit_malware.text() == '':
            print("Data to send Empty")
            self.lineEdit_malware.setStyleSheet("border: 1px solid red;")
            self.lineEdit_malware.setPlaceholderText("Empty")
            return
        
        if os.path.exists(self.lineEdit_malware.text()) == True:
            print("File Scan")
            MalwareScanning.FileScan(self)
        elif self.lineEdit_malware.text().startswith('https://') or self.lineEdit_malware.text().startswith('http://'):
            print("URL Scan")
            MalwareScanning.URLScan(self)
        else:
            print("Invalid File or URL")
            self.lineEdit_malware.setStyleSheet("border: 1px solid red;")
            self.lineEdit_malware.setText("")
            self.lineEdit_malware.setPlaceholderText("Invalid URL or File")
    
    def FileScan(self):
        print("File Scan")
        input = self.lineEdit_malware.text()
        url = self.api_file_scan
        files = { "file": open(input, "rb") }
        headers = {
            "accept": "application/json",
            "x-apikey": self.api_vt_key,
        }

        response = requests.post(url, files=files, headers=headers)

        print(response.text)
        # response code detect
        if response.status_code == 200:
            print("File Scan Success")
            self.lineEdit_malware.setStyleSheet("border: 1px solid green;")
            self.lineEdit_malware.setPlaceholderText("File Scan Success")
        elif response.status_code == 400:
            print("Bad request!")
            self.lineEdit_malware.setStyleSheet("border: 1px solid red;")
            self.lineEdit_malware.setPlaceholderText("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
            self.lineEdit_malware.setStyleSheet("border: 1px solid orange;")
            self.lineEdit_malware.setPlaceholderText("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
            self.lineEdit_malware.setStyleSheet("border: 1px solid yellow;")
            self.lineEdit_malware.setPlaceholderText("Server error!")
        
        id = response.json()['data']['id']
        print(id)
        MalwareScanning.fileAnalyses(self, id)

    def fileAnalyses(self, id):
        url = self.api_file_analysis + "/" + id

        headers = {
            "accept": "application/json",
            "x-apikey": self.api_vt_key
        }

        response = requests.get(url, headers=headers)
        print(response.text)
        if response.status_code == 200:
            print("File Analyses Success")
        elif response.status_code == 400:
            print("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
        id = response.json()['meta']['file_info']['sha256']
        print(id)
        MalwareScanning.fileReport(self, id)
    
    def fileReport(self, id):
        url = self.api_file_scan + "/" + id

        headers = {
            "accept": "application/json",
            "x-apikey": self.api_vt_key
        }

        response = requests.get(url, headers=headers)
        print(response.text)
        if response.status_code == 200:
            print("File Report Success")
        elif response.status_code == 400:
            print("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")

        MalwareScanning.showData(self, response, type='file')
        
    def URLScan(self):
        print("URL Scan")
        input = self.lineEdit_malware.text()
        url = self.api_url_scan

        payload = { "url": input }
        headers = {
            "accept": "application/json",
            "x-apikey": self.api_vt_key,
            "content-type": "application/x-www-form-urlencoded"
        }

        response = requests.post(url, data=payload, headers=headers)
        print(response.text)

        # response code detect
        if response.status_code == 200:
            print("URL Scan Success")
            self.lineEdit_malware.setStyleSheet("border: 1px solid green;")
            self.lineEdit_malware.setPlaceholderText("URL Scan Success")
        elif response.status_code == 400:
            print("Bad request!")
            self.lineEdit_malware.setStyleSheet("border: 1px solid red;")
            self.lineEdit_malware.setPlaceholderText("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
            self.lineEdit_malware.setStyleSheet("border: 1px solid orange;")
            self.lineEdit_malware.setPlaceholderText("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
            self.lineEdit_malware.setStyleSheet("border: 1px solid yellow;")
            self.lineEdit_malware.setPlaceholderText("Server error!")

        id = response.json()['data']['id'].split('-')[1]
        print(id)
        MalwareScanning.URLReport(self, id)

    def URLReport(self, id):
        url = self.api_url_scan + "/" + id
        print(url)
        headers = {
            "accept": "application/json",
            "x-apikey": self.api_vt_key
        }
        response = requests.get(url, headers=headers)
        print(response.text)
        if response.status_code == 200:
            print("URL Report Success")
        elif response.status_code == 400:
            print("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
        
        MalwareScanning.showData(self, response, type='url')

    def showData(self, response, type):
        if type == 'file':
            # rename label
            self.label_finalURL.setText('File Name')
            self.label_tid.setText('File Type')
            self.label_typeMalware.setText('Scan Type')
            self.label_sha256.setText('SHA-256')
            self.label_size.setText('File Size')
            # show data
            
            try:
                
                maliciouse = response.json()['data']['attributes']['last_analysis_stats']['malicious']
                suspicious = response.json()['data']['attributes']['last_analysis_stats']['suspicious']
                undetected = response.json()['data']['attributes']['last_analysis_stats']['undetected']

                self.label_maliciousResult.setText(str(maliciouse))
                self.label_suspiciousResult.setText(str(suspicious))
                self.label_undetectedResult.setText(str(undetected))

                size = response.json()['data']['attributes']['size']
                if size < 1024:
                    size = str(size) + " Bytes"
                elif size < 1048576:
                    size = str(round(size/1024, 2)) + " KB"
                elif size < 1073741824:
                    size = str(round(size/1048576, 2)) + " MB"
                elif size < 1099511627776:
                    size = str(round(size/1073741824, 2)) + " GB"
                else:
                    size = str(round(size/1099511627776, 2)) + " TB"
                
                self.label_sizeResult.setText(size)\
                    if response.json()['data']['attributes']['size'] != 0 else self.label_sizeResult.setText('-')

                self.label_finalURLResurlt.setText(response.json()['data']['attributes']['names'][0] ) \
                    if response.json()['data']['attributes']['names'][0] != [] else self.label_finalURLResurlt.setText('-')
                
                
                filetype = response.json()['data']['attributes']['type_description']
                self.label_tidResult.setText(filetype) \
                    if filetype != '' else self.label_tidResult.setText('-')
                
                scantype = response.json()['data']['type']
                self.label_typeMalwareResult.setText(scantype) \
                    if scantype != '' else self.label_typeMalwareResult.setText('-')
                
                hashfile =  response.json()['data']['attributes']['sha256']
                self.label_sha256Result.setText(hashfile) \
                    if hashfile != '' else self.label_sha256Result.setText('-')
                
            except KeyError as e:
                print("Key Error" + str(e))

            if int(self.label_maliciousResult.text()) > 0:
                print("Malware")
                self.label_imagemalware.setPixmap(QPixmap("./assets/images/FileMalware.png"))
                
            else:
                print("No Malware")
                self.label_imagemalware.setPixmap(QPixmap("./assets/images/FileCheck.png"))
                
                
        
        if type == 'url':
            # rename label
            self.label_finalURL.setText('URL')
            self.label_tid.setText('TLD')
            self.label_typeMalware.setText('Scan Type')
            self.label_sha256.setText('SHA-256')
            self.label_size.setText('Site Name')
            # show data
            try:

                maliciouse = response.json()['data']['attributes']['last_analysis_stats']['malicious']
                suspicious = response.json()['data']['attributes']['last_analysis_stats']['suspicious']
                undetected = response.json()['data']['attributes']['last_analysis_stats']['undetected']

                self.label_maliciousResult.setText(str(maliciouse))
                self.label_suspiciousResult.setText(str(suspicious))
                self.label_undetectedResult.setText(str(undetected))
                
                destination_url = response.json()['data']['attributes']['last_final_url']
                self.label_finalURLResurlt.setText(destination_url) \
                    if destination_url != '' else self.label_finalURLResurlt.setText('-')
                
                tld_url = response.json()['data']['attributes']['tld']
                self.label_tidResult.setText(tld_url) \
                    if tld_url != '' else self.label_tidResult.setText('-')

                scan_type = response.json()['data']['type'].upper()
                self.label_typeMalwareResult.setText(scan_type) \
                    if scan_type != '' else self.label_typeMalwareResult.setText('-')
                
                hash_url = response.json()['data']['attributes']['last_http_response_content_sha256']
                self.label_sha256Result.setText(hash_url) \
                    if hash_url != '' else self.label_sha256Result.setText('-')
                
                #self.label_sizeResult.setText(response.json()['data']['attributes']['title'])
                site_name = response.json()['data']['attributes']['html_meta']['title'][0] 
                self.label_sizeResult.setText(site_name) \
                    if site_name != [] else self.label_sizeResult.setText('-')
                
            except KeyError as e:
                print("Key Error" + str(e))
                try:
                    site_name = response.json()['data']['attributes']['last_final_url'].split('/')[2] 
                except KeyError as e:
                    site_name = "-"
                print(site_name)
                self.label_sizeResult.setText(site_name) \
                    if site_name != [] else self.label_sizeResult.setText('-')

            if int(self.label_maliciousResult.text()) > 0:
                print("Malware")
                malware_logo = QPixmap("./assets/images/URLMalware.png")
                self.label_imagemalware.setPixmap(malware_logo)
                #self.label_malicious.setStyleSheet("background-color: red;")
                # if int(self.label_suspiciousResult.text()) > 0:
                #     self.label_suspicious.setStyleSheet("background-color: orange;")
                # if int(self.label_undetectedResult.text()) > 0:
                #     self.label_undetected.setStyleSheet("background-color: gray;")
            else:
                print("No Malware")
                urlcheck_logo = QPixmap("./assets/images/URLCheck.png")
                self.label_imagemalware.setPixmap(urlcheck_logo)
                # self.label_malicious.setStyleSheet("background-color: green;")
                # self.label_suspicious.setStyleSheet("background-color: green;")
                # self.label_undetected.setStyleSheet("background-color: green;")


    def createReport(self):
        print("Create Report")
        pdf_file = "./data/MalwareReport.pdf"
        c = canvas.Canvas(pdf_file, pagesize=A4)
        c.setLineWidth(.3)
        c.setFont('Helvetica', 12)
        c.setTitle('Malware Report')
        c.setAuthor("SecGizmo")
        c.setSubject("Malware Analysis")
        c.setKeywords("Python, PDF, Malware Analysis, VirusTotal, SecGizmo")
        c.setCreator("SecGizmo")
        c.pageHasData()
        c.drawImage("./assets/images/ISAN.png", 175, 650, width=255, height=145)
        c.drawString(30, 750, 'Malware Report')
        c.drawString(30, 735, 'SecGizmo')
        c.drawString(480, 750, "Date: " + str(datetime.datetime.now().strftime("%Y-%m-%d")))
        c.line(480,747,580,747)
        c.setFont('Helvetica', 20)
        c.drawString(245, 725, 'Malware Analysis')
        c.setFont('Helvetica', 12)
        c.drawString(30, 703, 'Malicious: ' + self.label_maliciousResult.text())
        c.drawString(30, 683, 'Suspicious: ' + self.label_suspiciousResult.text())
        c.drawString(30, 663, 'Undetected: ' + self.label_undetectedResult.text())
        c.drawString(30, 643, 'Final URL: ' + self.label_finalURLResurlt.text())
        c.drawString(30, 623, 'TLD: ' + self.label_tidResult.text())
        c.drawString(30, 603, 'Scan Type: ' + self.label_typeMalwareResult.text())
        c.drawString(30, 583, 'SHA-256: ' + self.label_sha256Result.text())
        c.drawString(30, 563, 'Size: ' + self.label_sizeResult.text())
        c.showPage()
        c.save()
        print(f"PDF created: {pdf_file.split('/')[-1]}")
        self.btn_createReport.setText("Created!")

        # prepare send email
        self.lineEdit_malware.setText('')
        self.lineEdit_malware.setPlaceholderText('ex. enter your email')
        self.lineEdit_malware.setStyleSheet("border: 2px solid Green;")
        self.lineEdit_malware.textChanged.connect(lambda: MalwareScanning.update(self))

    def sendEmail(self):
        print("Send Email")
        email = self.lineEdit_malware.text()
        if email == '':
            print("Email Empty")
            self.lineEdit_malware.setStyleSheet("border: 2px solid red;")
            self.lineEdit_malware.setPlaceholderText("Empty")
            return
        print("final email = " + email)
        self.btn_sendEmail.setText("Sent!")

    def openFileScanning(self):
        print("Open File")
        #pass
        filepath, ok = QFileDialog.getOpenFileName(
            self,
            "Select a File", 
            os.getcwd(), 
            "All files (*.*)"
        )
        if filepath:
            path = Path(filepath)
            self.lineEdit_malware.setText(str(path))
            if path.exists() != True: # check if file exists 
                print(f"File exists at: {path.exists()}")
            print(f"Get file at: {path}")

            return path
        
    def update(self):
        input_email = self.lineEdit_malware.text()
        if '@' not in input_email:
            print("Invalid Email")
            self.lineEdit_malware.setStyleSheet("border: 2px solid orange;")
            self.lineEdit_malware.setPlaceholderText("Invalid Email")
            return
        else:
            print("Email Correct")
            self.lineEdit_malware.setStyleSheet("border: 2px solid green;")
            self.lineEdit_malware.setPlaceholderText("Email Correct")

        print(input_email)