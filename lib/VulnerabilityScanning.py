import os
import sys
import threading
from xml.dom import minidom
import datetime
from subprocess import Popen, PIPE

class VulnerabilityScanning():

    Well_Known_Ports = [
        {'port': '21',   'service': 'File Transfer Protocol (FTP)'},
        {'port': '22',   'service': 'Secure Shell (SSH)'},
        {'port': '23',   'service': 'Telnet'},
        {'port': '25',   'service': 'Simple Mail Transfer Protocol (SMTP)'},
        {'port': '80',   'service': 'Hypertext Transfer Protocol (HTTP)'},
        {'port': '110',  'service': 'Post Office Protocol (POP3)'},
        {'port': '143',  'service': 'Internet Message Access Protocol (IMAP)'},
        {'port': '443',  'service': 'SSL/TLS (HTTPs)'},
        {'port': '445',  'service': 'Microsoft-DS (SMB)'},
        {'port': '3389', 'service': 'Remote Desktop Protocol (RDP)'},
    ]
    def __init__(self):
        #super(VulnerabilityScanning, self).__init__()
        super().__init__()
    
    def clear(self):
        self.lineEdit_vulner.setText('')
        self.dropdown_typeScan.setCurrentIndex(0)
        self.textEdit_ResultScan.setPlainText('')
        self.lineEdit_commandvulner.setText('')
        
    def typeScan(self):
        type = self.dropdown_typeScan.currentText()
        print(type)
        return type

    def showWellKnownPorts(self):
        tmp1 = "Ports"
        tmp2 = "Services"
        for i in range(len(VulnerabilityScanning.Well_Known_Ports)):
            tmp1 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['port']}"
            tmp2 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['service']}"
        self.label_SimplePorts.setText(tmp1)
        self.label_SimpleServices.setText(tmp2)

    def nmapScan(self):
        # Check if the input is empty
        if self.lineEdit_vulner.text() == '':
            print("Data to send Empty")
            self.lineEdit_vulner.setStyleSheet("border: 1px solid red;")
            self.lineEdit_vulner.setPlaceholderText("Empty")
            return
        
        # get the type of scan
        type = VulnerabilityScanning.typeScan(self)
        
        # Validate the input
        if 'nmap' in self.lineEdit_vulner.text():
            command = self.lineEdit_vulner.text()
        else:
            command = self.lineEdit_vulner.text()
            command = "nmap " + command
        
        if type == "Quick Scan":
            # -T4: Set timing template (higher is faster)
            # -F: Fast mode - Scan fewer ports than the default scan
            command = command + " -T4 -F"

        elif type == "Stealth Scan":
            # -sS: Stealth mode - Scan using TCP SYN scan
            # -sF: Scan using the FIN scan
            command = command + " -sS -F"

        elif type == "Agressive Scan":
            # -A: Enable OS detection, version detection, script scanning, and traceroute
            # -v: Increase verbosity level (use -vv or more for greater effect)
            command = command + " -T4 -A -v"

        elif type == "Adaptive Scan":
            # -Pn: Treat all hosts as online -- skip host discovery
            command = command + " -Pn -sF"

        elif type == "Vulner.NSE Script":
            # -sV: Probe open ports to determine service/version info
            # --script=vulners: Check for vulnerabilities using the vulners script
            command = command + " -sV --script=vulners"

        elif type == "Caft Commands":
            command = self.lineEdit_vulner.text()
        else:
            command = command
        
        # Set the command in the lineEdit
        self.lineEdit_commandvulner.setText(command)
        # Process the command
        process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE, text=True)
        stdout, stderr = process.communicate()

        if process.returncode == 0:
            self.textEdit_ResultScan.setPlainText(stdout)
            #self.label_Vulner.setText("Nmap Result: (Success)")
        else:
            self.textEdit_ResultScan.setPlainText(stderr)
            #self.label_Vulner.setText("Nmap Result: (Error)")

 