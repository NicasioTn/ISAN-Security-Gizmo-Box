import threading
from subprocess import Popen, PIPE
import subprocess
import PyQt6.QtGui as QtGui

class VulnerabilityScanning():

    Well_Known_Ports = [
        {'port': '21',   'service': 'File Transfer Protocol (FTP)'},
        {'port': '22',   'service': 'Secure Shell (SSH)'},
        {'port': '23',   'service': 'Telnet'},
        {'port': '25',   'service': 'Simple Mail Transfer Protocol (SMTP)'},
        {'port': '80',   'service': 'Hypertext Transfer Protocol (HTTP)'},
        {'port': '110',  'service': 'Post Office Protocol (POP3)'},
        {'port': '143',  'service': 'Internet Message Access Protocol (IMAP)'},
        {'port': '443',  'service': 'SSL/TLS (HTTPs)'},
        {'port': '445',  'service': 'Microsoft-DS (SMB)'},
        {'port': '3389', 'service': 'Remote Desktop Protocol (RDP)'},
    ]
    def __init__(self):
        #super(VulnerabilityScanning, self).__init__()
        super().__init__()
    
    def clear(self):
        self.lineEdit_vulner.setText('')
        self.dropdown_typeScan.setCurrentIndex(0)
        self.textEdit_ResultScan.setPlainText('')
        self.lineEdit_commandvulner.setText('')

    def showWellKnownPorts(self):
        tmp1 = "Ports"
        tmp2 = "Services"
        for i in range(len(VulnerabilityScanning.Well_Known_Ports)):
            tmp1 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['port']}"
            tmp2 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['service']}"
        self.label_SimplePorts.setText(tmp1)
        self.label_SimpleServices.setText(tmp2)
        
    def typeScan(self):
        type = self.dropdown_typeScan.currentText()
        #print(type)
        return type

    def prepareCommand(self):
        # Check input is empty
        if self.lineEdit_vulner.text() == '':
            print("Data to send Empty")
            self.lineEdit_vulner.setStyleSheet("border: 2px solid red;")
            self.lineEdit_vulner.setPlaceholderText("Empty ")
            return
        
        # get the type of scan
        type = VulnerabilityScanning.typeScan(self)
        
        # Validate the input
        if 'nmap' in self.lineEdit_vulner.text():
            target = self.lineEdit_vulner.text()
        else:
            target = self.lineEdit_vulner.text()
        
        # Select Type of Scan and set the command
        if type == "Quick Scan":
            option = "-T4 -F" # -T4 = Aggressive, -F = Fast Scan

        elif type == "Stealth Scan":
            option = "-sS" # -sS = Stealth Scan

        elif type == "Agressive Scan":
            option = "-T4 -A" # -T4 = Aggressive, -A = Agressive Scan Os Detection, Version Detection, Script Scanning, and Traceroute

        elif type == "Adaptive Scan":
            option = "-Pn -sF" # -Pn = Disable Ping, -sF = Fast Scan

        elif type == "Vulner.NSE Script":
            option = "-sV --script=vulners" 

        else:
            option = "" 
        
        # Set the command in the lineEdit
        self.lineEdit_commandvulner.setText("nmap " + option + " " + target)
        self.lineEdit_commandvulner.setStyleSheet("border: 2px solid green;")
        # Start Scan
        VulnerabilityScanning.start_scan(self, option, target)

    def start_scan(self, option, target):
        self.textEdit_ResultScan.clear() # Clear the textEdit
        # Start Thread
        VulnerabilityScanning.scan_thread = threading.Thread(target=VulnerabilityScanning.run_scan, args=(self, option, target,))
        VulnerabilityScanning.scan_thread.start()

    def run_scan(self, option, target):
        option = option.split()
        #print(option)
        try:
            #ใช้ *option เพื่อแยก args ทำให้สามารถใช้ใน subprocess.check_output ได้อย่างยืดหยุ่น
            result = subprocess.check_output(['nmap', *option, target], text=True)
            VulnerabilityScanning.update_result_text(self, result)
        except subprocess.CalledProcessError as e:
            print(f"Scan Error: {e.stderr}")
            VulnerabilityScanning.update_result_text(self, f"Scan Error: {e.stderr}")

    def update_result_text(self, text):
        cursor = self.textEdit_ResultScan.textCursor()
        cursor.movePosition(QtGui.QTextCursor.MoveOperation.Start)
        cursor.insertText(text)
        self.textEdit_ResultScan.setTextCursor(cursor)

    