import os
from xml.dom import minidom
import datetime
import nmap
import subprocess

class VulnerabilityScanning():
    def __init__(self):
        super(VulnerabilityScanning, self).__init__()
    
    def clear(self):
        self.lineEdit_vulner.setText('')
        self.showVulner.setText('')
        
    def PrepareInput(self):
        input = self.lineEdit_vulner.text()
        stmt_nmap = ("nmap %s" %input).split(" ")

        # Remove any leading `https://` or `http://` from the target URL.
        if stmt_nmap[1].startswith("https://"):
            stmt_nmap[1] = stmt_nmap[1].replace("https://", "")
        elif stmt_nmap[1].startswith("http://"):
            stmt_nmap[1] = stmt_nmap[1].replace("http://", "")
            
        print(stmt_nmap[:2])
        craft_command = " ".join(stmt_nmap[:2])
        self.lineEdit_vulner.setPlaceholderText(craft_command)
        return craft_command

    def scanVulnerability(self):
        # check input empty
        if self.lineEdit_vulner.text() == '':
            print("Data to send Empty")
            self.lineEdit_vulner.setStyleSheet("border: 1px solid red;")
            self.lineEdit_vulner.setPlaceholderText("Empty")
            return
        else:
            self.lineEdit_vulner.setStyleSheet("border: 2px solid green;")
            self.lineEdit_vulner.setPlaceholderText("Correct")
        
        #prepare statement
        stmt_nmap = VulnerabilityScanning.PrepareInput(self)
        #print("nmap " + input)

        # execute command
        if stmt_nmap.startswith('nmap'):
            execute_command = stmt_nmap
            os.system(execute_command + " -oX ./data/nmap.xml")
            print("Execute command: " + execute_command)
            VulnerabilityScanning.showData(self)
            
    def showData(self):
        file = minidom.parse('./data/nmap.xml')
        models = file.getElementsByTagName('port')
        print("Total ports: " + str(len(models)))
        protocol = []
        portid = []
        state = []
        service = []
        port_suspicious = ['20', '21','22', '23', '25', '53', '110', '143']
        port_malware = ['135', '137', '138', '139', '445', '512', '535', '543']
        
        # get hostname, command, datetime
        hostname = file.getElementsByTagName('hostname')[0].getAttribute('name')
        
        command = file.getElementsByTagName('nmaprun')[0].getAttribute('args')
        
        time = file.getElementsByTagName('runstats')[0].getElementsByTagName('finished')[0].getAttribute('time')
        date_format = "Date: " + datetime.datetime.fromtimestamp(int(time)).strftime('%d-%m-%Y Time: %H:%M:%S')
        
        print("Hostname: " + hostname)
        print("Command: " + command)
        print(date_format)
        
        # append data to list
        for model in models:
            protocol.append(model.getAttribute('protocol'))
            portid.append(model.getAttribute('portid'))
            state.append(model.getElementsByTagName('state')[0].getAttribute('state'))
            service.append(model.getElementsByTagName('service')[0].getAttribute('name'))
        
        temp = ""
        # print data
        temp = "Port | Protocol |   State   |   Service"
        for i in range(len(models)):
            print(f"Port: {portid[i]} | Protocol: {protocol[i]} | State: {state[i]} | Service: {service[i]}")
            temp += f"\n{portid[i]:^10}           {protocol[i]:^10}        {state[i]:^10}           {service[i]:^10}"
            
            # warning port open suspicious
            if portid[i] in port_suspicious or portid[i] in port_malware:
                temp += "❗"
            else:
                temp += " ✔ "

        self.showVulner.setText(temp)

        # add padding
        temp = temp.replace(" ", "    ")

        # add line break
        temp = temp.replace("\n", "\n\n")

        # add copy button
        self.showVulner.addAction("Copy")


 